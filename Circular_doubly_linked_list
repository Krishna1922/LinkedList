#include<iostream>
#include<stdlib.h>
using namespace std;
struct node
{
  int data;
  struct node *next;
  struct node *prev;
};
///////////////////////////////////////traversing/////////////////////////////////////
void Traversal(struct node* head){
    struct node* ptr = head;
    do{
        cout << ptr->data<<" ";
        ptr = ptr->next;
    }while(ptr!=head);
    
}
/////////////////////////////////////reverse traversing/////////////////////////////////
void Reverse_Traversal(struct node* head){
    struct node* ptr = head;
    while(ptr->next!=head){
        ptr = ptr->next;
    }
    do{
        cout << ptr->data<<" ";
        ptr = ptr->prev;
    }while(ptr!=head->prev);
}
//////////////////////////////delete from beggining////////////////////////////////////
struct node* Delete_Beg(struct node* head){
    struct node* p = head;
    struct node* q= head;
    while(q->next!=head){
        q=q->next;
    }
    q->next = p->next;
    p->next->prev = p->prev;
    head = p->next;
    return head;
}

///////////////////////////////delete from any index////////////////////////
struct node* Delete_index(struct node* head,int index){
    struct node* p = head;
    struct node* q = head->next;
    int i=0;
    while(i!=index-1){
        p=p->next;
        q=q->next;
        i++;
    }
    p->next = q->next;
    q->next->prev = p;
    free(q);
    return head;
}
////////////////////////////////////////delete from end////////////////////////////////////
struct node* Delete_End(struct node* head){
    struct node* p = head;
    struct node* q = head->next;
    while(q->next!=head) {
        p = p->next;
        q = q->next;
    }
    p->next = head;
    free(q);
    return head;
}
/////////////////////////////////inserting at the beginninng/////////////////////////////////////
struct node* Insert_Beg(struct node* head, int data){
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    struct node* p = head;
    p->prev->next = ptr;
    ptr->prev = p->prev;
    p->prev = ptr;
    ptr->next = p;
    ptr->data = data;
    head = p->prev;
    return head;
    
}
////////////////////////////////////////////insertion at any index/////////////////////////////////
struct node* Insert_Index(struct node* head,int index,int data){
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    struct node* p = head;
    int i = 0;
    while(i!=index-1){
        p=p->next;
        i++;
    }
    p->next->prev = ptr;
    ptr->next = p->next;
    ptr->prev = p;
    p->next = ptr;
    ptr->data = data;
    return head;
    
}
/////////////////////////////////////////////inserting at the end////////////////////////////////////////////////
struct node* Insert_End(struct node* head,int data){
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    struct node* p = head;
    while(p->next!=head){
        p=p->next;
    }
    ptr->prev = p;
    ptr->next = p->next;
    p->next = ptr;
    p->next->prev = ptr;
    ptr->data = data;
    return head;
}
int
main ()
{

  /////////////////creating 4 node//////////////////////////
  struct node *head = NULL;
  struct node *second = NULL;
  struct node *third = NULL;
  struct node *fourth = NULL;
  struct node *fifth = NULL;


  /////////////////4  memory allocation////////////////////
  head = (struct node *) malloc (sizeof (struct node));
  second = (struct node *) malloc (sizeof (struct node));
  third = (struct node *) malloc (sizeof (struct node));
  fourth = (struct node *) malloc (sizeof (struct node));
  fifth = (struct node *) malloc (sizeof (struct node));


  head->data = 1;
  head->prev = fifth;
  head->next = second;

  second->data = 2;                                
  second->prev = head;
  second->next = third;

  third->data = 3;
  third->prev = second;
  third->next = fourth;

  fourth->data = 4;
  fourth->prev = third;
  fourth->next = fifth;
  
  fifth->data = 5;
  fifth->prev = fourth;
  fifth->next = head;

  Traversal (head);
  cout << endl << "After Insertion of node" << endl;
  //head = Delete_Beg(head);
  //head = Insert_End(head,9);
  //head = Insert_Beg(head,8);
  head = Insert_End(head,9);
  Traversal (head);

}
