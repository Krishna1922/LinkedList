#include<iostream>
#include<stdlib.h>
using namespace std;
struct node
{
  int data;
  struct node *next;
  struct node *prev;
};
///////////////////////////////////////travrsing/////////////////////////////////////
void Traversal(struct node* head){
    struct node* ptr = head;
    while(ptr!=NULL){
        cout << ptr->data<<" ";
        ptr = ptr->next;
    }
    
}
//////////////////////////////inserting at the beggining////////////////////////////////
struct node* Insert_Beg(struct node* head,int data){
    struct node* p = (struct node*)malloc(sizeof(struct node));
    p->prev = NULL;
    p->data = data;
    p->next = head;
    head->prev = p;
    head = p;
    return head;
    
}
///////////////////////////////inserting at any index////////////////////////////////////////
struct node* Insert_index(struct node* head,int data,int index){
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    struct node* p = head;
    int i = 0;
    while(i!=index-1){
        p = p->next;
        i++;
    }
    ptr->prev = p;
    ptr->next = p->next;
    ptr->data = data;
    p->next=ptr;
    return head;
    
}
/////////////////////////////////////inserting at the end////////////////////////
struct node* Insert_End(struct node* head,int data){
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    struct node* p = head;
    while(p->next!=NULL){
        p=p->next;
    }
    p->next = ptr;
    ptr->prev = p;
    ptr->data = data;
    ptr->next = NULL;
    return head;
}
int
main ()
{

  /////////////////creating 4 node
  struct node *head = NULL;
  struct node *second = NULL;
  struct node *third = NULL;
  struct node *fourth = NULL;


  /////////////////4  memory allocation////////////////////
  head = (struct node *) malloc (sizeof (struct node));
  second = (struct node *) malloc (sizeof (struct node));
  third = (struct node *) malloc (sizeof (struct node));
  fourth = (struct node *) malloc (sizeof (struct node));


  head->data = 1;
  head->prev = NULL;
  head->next = second;

  second->data = 2;
  second->prev = head;
  second->next = third;

  third->data = 3;
  third->prev = second;
  third->next = fourth;

  fourth->data = 4;
  fourth->prev = third;
  fourth->next = NULL;

  Traversal (head);
  cout << endl << "After Insertion of node" << endl;
  //head = Insert_Beg(head,8);
  //head = Delete_index(head,2);
  //head = Delete_End (head);
  //head = Insert_index(head,9,1);
 head = Insert_End(head,9);
  Traversal (head);

}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////doubly linked list deletion///////////////////////////////////////////////////////////////
#include<iostream>
#include<stdlib.h>
using namespace std;
struct node
{
  int data;
  struct node *next;
  struct node *prev;
};
///////////////////////////////////////travrsing/////////////////////////////////////
void Traversal(struct node* head){
    struct node* ptr = head;
    while(ptr!=NULL){
        cout << ptr->data<<" ";
        ptr = ptr->next;
    }
    
}
//////////////////////////////delete from beggining////////////////////////////////////
struct node* Delete_Beg(struct node* head){
    struct node* p = head;
    p->next->prev=NULL;
    head = p->next;
    free(p);
    return head;
}
///////////////////////////////delete from any index////////////////////////
struct node* Delete_index(struct node* head,int index){
    struct node* p = head;
    struct node* q = head->next;
    int i=0;
    while(i!=index-1){
        p=p->next;
        q=q->next;
        i++;
    }
    p->next = q->next;
    q->next->prev = p;
    free(q);
    return head;
}
////////////////////////////////////////delete from end////////////////////////////////////
struct node* Delete_End(struct node* head){
    struct node* p = head;
    struct node* q = head->next;
    while(q->next!=NULL) {
        p = p->next;
        q = q->next;
    }
    p->next = NULL;
    free(q);
    return head;
}
int
main ()
{

  /////////////////creating 4 node
  struct node *head = NULL;
  struct node *second = NULL;
  struct node *third = NULL;
  struct node *fourth = NULL;


  /////////////////4  memory allocation////////////////////
  head = (struct node *) malloc (sizeof (struct node));
  second = (struct node *) malloc (sizeof (struct node));
  third = (struct node *) malloc (sizeof (struct node));
  fourth = (struct node *) malloc (sizeof (struct node));


  head->data = 1;
  head->prev = NULL;
  head->next = second;

  second->data = 2;
  second->prev = head;
  second->next = third;

  third->data = 3;
  third->prev = second;
  third->next = fourth;

  fourth->data = 4;
  fourth->prev = third;
  fourth->next = NULL;

  Traversal (head);
  cout << endl << "After Insertion of node" << endl;
  head = Delete_End(head);
  //head = Insert_End(head,9);
  Traversal (head);

}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
