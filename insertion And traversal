//////////////////////////////////////////////////////////////////////////////////////////////singly link list traversal///////////////////////////////////////////////////


#include<iostream>
#include<stdlib.h>
using namespace std;
struct node{ 
	int data;
	struct node *next;
};

void Traversal(struct node* ptr){
	while(ptr!=NULL){
		cout << ptr->data;
		ptr = ptr->next;
	}
}
int main(){
  //creating nodes
	struct node* head;
	struct node* second;
	struct node* third;

	// allocate memory to each nodes
	head = (struct node*)malloc(sizeof(struct node));
	second = (struct node*)malloc(sizeof(struct node));
	third = (struct node*)malloc(sizeof(struct node));

	head->data = 1;
	head->next = second;

	second->data = 2;
	second->next = third;

	third->data = 3;
	third->next = NULL;
  Traversal(head);
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////linked list insertion ///////////////////////////////////////////////////////////
#include<iostream>
#include<stdlib.h>
using namespace std;
struct node{ 
	int data;
	struct node *next;
};

///////////////////////////insert at beginning?///////////////////////
struct node* Insert_Beg(struct node* head,int data){
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    ptr->next = head;
    ptr->data = data;
    head = ptr;
    return head;
}
///////////////////////insertion at any index////////////////////////////
struct node* Insert_Index(struct node* head,int data,int index){
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    struct node* p = head;
    int i = 0;
    while(i!=index-1){
        p = p->next;
        i++;
    }
    ptr->next = p->next;
    ptr->data = data;
    p->next = ptr;
    return head;
    
}
/////////////////////traversing/////////////////////
void Traversal(struct node* ptr){
	while(ptr!=NULL){
		cout << ptr->data<<" ";
		ptr = ptr->next;
	}
}
/////////////////////inserting at the end///////////////////////
struct node* Insert_End(struct node* head,int data){
    struct node* ptr = (struct node*)malloc(sizeof(struct node));
    struct node* p = head;
    while(p->next!=NULL){
        p = p->next;
    }
    p->next = ptr;
    ptr->next = NULL;
    ptr->data = data;
    
    return head;
    
}
int main(){
	struct node* head;
	struct node* second;
	struct node* third;

	// allocate memory to each nodes
	head = (struct node*)malloc(sizeof(struct node));
	second = (struct node*)malloc(sizeof(struct node));
	third = (struct node*)malloc(sizeof(struct node));

	head->data = 1;
	head->next = second;

	second->data = 2;
	second->next = third;

	third->data = 3;
	third->next = NULL;
	Traversal(head);
	//head = Insert_Beg(head,22);
	//Traversal(head);
	cout << " --after insertion--  ";
	//head = Insert_Index(head,22,1);
	head = Insert_End(head,34);
	Traversal(head);
	}
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  ///////////////////////////////////linked list deletion////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  #include<iostream>
#include<stdlib.h>
using namespace std;
struct node{
    int data;
    struct node* next;
};
/////////////////////////////traversing
void Traversal(struct node *ptr){
	while(ptr!=NULL){
		cout<<ptr->data<<" ";
		ptr = ptr->next;
	}
}
///////////////////deletion at beginning
struct node* Delete_Beg(struct node* head){
    struct node* ptr = head;
    head = head->next;
    free(ptr); 
    return head;
    
}
///////////////////deletion at any index
//////////////////(remember we cannont remove 0 index bcoz for 0 index we already deleted 1st node)
struct node* Delete_index(struct node* head,int index){
    struct node* p = head;
    struct node* q = head->next;
    int i = 0;
    while(i!=index-1){
        p = p->next;
        q = q->next;
        i++;
    }
    p->next = q->next;
    free(q);
    return head;
    
}
/////////////////////////Deletion at the end
struct node* Delete_End(struct node* head){
    struct node* p = head;
    struct node* q = head->next;
    while(q->next!=NULL){
        p = p->next;
        q = q->next;
    }
    p->next=NULL;
    free(q);
    return head;
    
}
int main(){
    
    /////////////////creating 4 node
    struct node* head = NULL;
    struct node* second = NULL;
    struct node* third = NULL;
    struct node* fourth = NULL;
    
    
    /////////////////4  memory allocation////////////////////
    head = (struct node*)malloc(sizeof(struct node));
    second = (struct node*)malloc(sizeof(struct node));
    third = (struct node*)malloc(sizeof(struct node));
    fourth = (struct node*)malloc(sizeof(struct node));
    
    
    head->data = 1;
	head->next = second;

	second->data = 2;
	second->next = third;

	third->data = 3;
	third->next = fourth;
    
    fourth->data = 4;
    fourth->next = NULL;
    
    Traversal(head);
    cout <<endl<< "After deletion of node"<<endl;
    //head = Delete_Beg(head);
    //head = Delete_index(head,2);
    head = Delete_End(head);
    Traversal(head);
   
}

  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
